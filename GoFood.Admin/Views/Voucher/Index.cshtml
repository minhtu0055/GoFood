@model PagedResult<VoucherViewModel>
@using GoFood.ViewModels.Common;
@using GoFood.ViewModels.Catalog.Vouchers;
@using GoFood.Data.Enums;

@{
    ViewData["Title"] = "Danh sách voucher";
}

<div class="text-end mb-4">
    <a asp-action="Create" asp-controller="Voucher" class="btn btn-primary">
        <i class="bx bx-plus me-1"></i> Tạo voucher mới
    </a>
</div>

<div class="card">
    <h5 class="card-header">@TempData["result"]</h5>
    <div class="card-header">
        <form asp-action="Index" method="get">
            <div class="row">
                <div class="col-md-4 mb-2">
                    <label class="form-label">Tên voucher</label>
                    <input type="text" value="@ViewBag.Keyword" name="keyword" class="form-control" placeholder="Nhập tên voucher..." />
                </div>
                <div class="col-md-3 mb-2">
                    <label class="form-label">Trạng thái</label>
                    <select name="status" class="form-select" asp-items="@ViewBag.StatusSelectList">
                        <option value="">Tất cả trạng thái</option>
                    </select>
                </div>
                <div class="col-md-2 mb-2 d-flex align-items-end">
                    <div class="btn-group w-100">
                        <button type="submit" class="btn btn-primary">
                            <i class="bx bx-search"></i> Tìm
                        </button>
                        <a asp-action="Index" class="btn btn-dark">
                            <i class="bx bx-reset"></i> Reset
                        </a>
                    </div>
                </div>
            </div>
        </form>
    </div>

    <div class="table-responsive text-nowrap">
        <table class="table">
            <thead>
                <tr>
                    <th>MÃ</th>
                    <th>TÊN VOUCHER</th>
                    <th>GIẢM GIÁ</th>
                    <th>THỜI GIAN</th>
                    <th>TRẠNG THÁI</th>
                    <th>SỐ LẦN DÙNG</th>
                    <th></th>
                </tr>
            </thead>
            <tbody class="table-border-bottom-0">
                @if (Model?.Items != null && Model.Items.Any())
                {
                    @foreach (var item in Model.Items)
                    {
                        <tr>
                            <td>
                                <span class="badge bg-label-dark">@item.Code</span>
                            </td>
                            <td>
                                <div>@item.Name</div>
                                <small class="text-muted">@item.Description</small>
                            </td>
                            <td>
                                @if (item.DiscountType == DiscountType.Percentage)
                                {
                                    <span class="badge bg-label-info">@item.DiscountValue%</span>
                                }
                                else
                                {
                                    <span class="badge bg-label-primary">@item.DiscountValue.ToString("N0")đ</span>
                                }
                                @if (item.MinimumOrderValue.HasValue)
                                {
                                    <div><small class="text-muted">Đơn tối thiểu: @item.MinimumOrderValue.Value.ToString("N0")đ</small></div>
                                }
                            </td>
                            <td>
                                <div class="text-muted">
                                    <div><i class="bx bx-calendar me-1"></i>Từ: @item.StartDate.ToString("dd/MM/yyyy HH:mm")</div>
                                    <div><i class="bx bx-calendar me-1"></i>Đến: @item.EndDate.ToString("dd/MM/yyyy HH:mm")</div>
                                </div>
                            </td>
                            <td>
                                <span class="badge bg-label-@GetStatusColor(item.Status) me-1">
                                    @GetStatusName(item.Status)
                                </span>
                            </td>
                            <td class="text-center">
                                @if (item.UsageLimit.HasValue)
                                {
                                    <span class="badge bg-label-info">@item.UsageCount/@item.UsageLimit</span>
                                }
                                else
                                {
                                    <span class="badge bg-label-info">@item.UsageCount/∞</span>
                                }
                            </td>
                            <td>
                                <div class="dropdown">
                                    <button type="button" class="btn p-0 dropdown-toggle hide-arrow" data-bs-toggle="dropdown">
                                        <i class="bx bx-dots-vertical-rounded"></i>
                                    </button>
                                    <div class="dropdown-menu">
                                        <a class="dropdown-item" href="@Url.Action("Edit", new { id = item.Id })">
                                            <i class="bx bx-edit-alt me-1"></i> Chỉnh sửa
                                        </a>
                                        <a class="dropdown-item" href="@Url.Action("Details", new { id = item.Id })">
                                            <i class="bx bx-detail me-1"></i> Chi tiết
                                        </a>
                                        @if (item.Status != PromotionStatus.Expired)
                                        {
                                            @if (item.Status != PromotionStatus.Active)
                                            {
                                                <form asp-action="UpdateStatus" asp-route-id="@item.Id" asp-route-status="@PromotionStatus.Active" 
                                                      method="post" style="display: inline;">
                                                    <button type="submit" class="dropdown-item" data-confirm="Bạn có chắc muốn kích hoạt voucher này?">
                                                        <i class="bx bx-play me-1"></i> Kích hoạt
                                                    </button>
                                                </form>
                                            }
                                            else
                                            {
                                                <form asp-action="UpdateStatus" asp-route-id="@item.Id" asp-route-status="@PromotionStatus.Inactive" 
                                                      method="post" style="display: inline;">
                                                    <button type="submit" class="dropdown-item" data-confirm="Bạn có chắc muốn tạm dừng voucher này?">
                                                        <i class="bx bx-pause me-1"></i> Tạm dừng
                                                    </button>
                                                </form>
                                            }
                                        }
                                    </div>
                                </div>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="7" class="text-center">Không có dữ liệu</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    @await Component.InvokeAsync("Pager", Model)
</div>

@section Scripts {
    <script>
        // Xử lý confirm khi submit form
        document.querySelectorAll('button[data-confirm]').forEach(button => {
            button.addEventListener('click', function(e) {
                e.preventDefault();
                const message = this.getAttribute('data-confirm');
                const form = this.closest('form');
                
                Swal.fire({
                    title: 'Xác nhận',
                    text: message,
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Đồng ý',
                    cancelButtonText: 'Hủy'
                }).then((result) => {
                    if (result.isConfirmed) {
                        form.submit();
                    }
                });
            });
        });

        // Tự động đóng alert sau 5 giây
        setTimeout(function () {
            $('.alert').alert('close');
        }, 5000);
    </script>
}

@functions {
    string GetStatusName(PromotionStatus status)
    {
        switch (status)
        {
            case PromotionStatus.Active:
                return "Đang hoạt động";
            case PromotionStatus.Inactive:
                return "Chưa hoạt động";
            case PromotionStatus.Expired:
                return "Đã hết hạn";
            default:
                return status.ToString();
        }
    }

    string GetStatusColor(PromotionStatus status)
    {
        switch (status)
        {
            case PromotionStatus.Active:
                return "success";
            case PromotionStatus.Inactive:
                return "warning";
            case PromotionStatus.Expired:
                return "danger";
            default:
                return "danger";
        }
    }
}